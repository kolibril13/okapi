{
  "example1640119102021482000.png": "#Checkboard\npixX= 15\npixY= 15\narray = [[(i+j)%2 for i in range(pixX)] for j in range(pixY)]\ndisp(array)\n",
  "example1640119103553938000.png": "array=np.full((10,10),10)\ndisp(array)\n",
  "example1640121462337072000.png": "#Linear diagonal\narray = [[i+j for i in range(pixX)] for j in range(pixY)]\ndisp(array)\n",
  "example1640121463551788000.png": "# alternative with numpy\narray=np.fromfunction(lambda i, j: i + j, shape=(15, 15))\ndisp(array)\n",
  "example1640121465549447000.png": "#Linear in axis1 direction\narray= [[i for i in range(pixX)] for j in range(pixY)]\ndisp(array)\n",
  "example1640121466204364000.png": "#Linear counter hori\narray= [[i*pixY+j for i in range(pixX)] for j in range(pixY)]\ndisp(array)\n",
  "example1640121466837531000.png": "#Random\narray = np.random.randint(0, 10, size=(15, 15))\ndisp(array)\n",
  "example1640121467527929000.png": "# sinudial fromfunction\narray=np.fromfunction(lambda i, j: np.sin(j), (15, 15))\ndisp(array, sep= \".1f\")\n",
  "example1640121468249566000.png": "x = np.linspace(0, 15, 15)\ny = np.linspace(0, 15, 15)\nxx, yy = np.meshgrid(x, y, sparse=False)\ndisp(xx)\n",
  "example1640121469056145000.png": "x = np.linspace(0, 15, 15)\ny = np.linspace(0, 15, 15)\nxx, yy = np.meshgrid(x, y, sparse=False)\ndisp(yy)\n",
  "example1640121469768541000.png": "x = np.linspace(0, 15, 15)\ny = np.linspace(0, 15, 15)\nxx, yy = np.meshgrid(x,y, sparse= False)\narray = xx+yy\ndisp(array)\n",
  "example1640121471128391000.png": "x= np.arange(-pixX//2,pixX//2)\ny= np.arange(-pixY//2,pixY//2)\nxx, yy = np.meshgrid(x,y, sparse= False)\narray = xx+yy\narray[ array <= 0 ] = 0\ndisp(array)\n",
  "example1640121471835741000.png": "#Linear increase from center in all directions\npixX,pixY=(15,15)\nx, y = np.meshgrid(np.linspace(-1,1,pixX), np.linspace(-1,1,pixY),sparse=False)\narray = np.sqrt(x**2+y**2)\ndisp(array, sep='.1f' )\n",
  "example1640121472945709000.png": "#Gaussian\npixX,pixY=(15,15)\nx, y = np.meshgrid(np.linspace(-1,1,pixX), np.linspace(-1,1,pixY))\nd = np.sqrt(x**2+y**2)\nsigma, mu = 1.0, 0.0\narray = np.exp(-( (d-mu)**2 / ( 2.0 * sigma**2 ) ) )\ndisp(array, sep='.1f' )\n",
  "example1640121474324113000.png": "# One Minus Gaussian and smaller sigma\npixX,pixY=(15,15)\nx, y = np.meshgrid(np.linspace(-1,1,pixX), np.linspace(-1,1,pixY))\nd = np.sqrt(x**2+y**2)\nsigma, mu = 0.4, 0.0\narray = 1-np.exp(-( (d-mu)**2 / ( 2.0 * sigma**2 ) ) )\ndisp(array, sep='.1f' )\n",
  "example1640121475138133000.png": "x, y = np.indices((31, 31))\ndx=15\ndy=15\nradius=13.5\ncirc = (x-dx)**2 + (y-dy)**2 <= radius**2\narray = np.zeros(x.shape)\narray[circ]=1\ndisp(array)\n",
  "example1640121476329011000.png": "# spiral  # code inspired from : https://stackoverflow.com/questions/36834505/creating-a-spiral-array-in-python\npixX,pixY=(15,15)\ndef spiral(width, height):\n    NORTH, S, W, E = (0, -1), (0, 1), (-1, 0), (1, 0) # directions\n    turn_right = {NORTH: E, E: S, S: W, W: NORTH} # old -> new direction\n\n    if width < 1 or height < 1:\n        raise ValueError\n    x, y = width // 2, height // 2 # start near the center\n    dx, dy = NORTH # initial direction\n    matrix = [[None] * width for _ in range(height)]\n    count = 0\n    while True:\n        count += 1\n        matrix[y][x] = count # visit\n        # try to turn right\n        new_dx, new_dy = turn_right[dx,dy]\n        new_x, new_y = x + new_dx, y + new_dy\n        if (0 <= new_x <= width and 0 <= new_y <= height and\n            matrix[new_y][new_x] is None): # can turn right\n            x, y = new_x, new_y\n            dx, dy = new_dx, new_dy\n        else: # try to move straight\n            x, y = x + dx, y + dy\n            if not (0 <= x < width and 0 <= y < height):\n                return matrix # nowhere to go\nnum_pixels=19\narray=spiral(pixX, pixY)\ndisp(array)\n",
  "example1640121479121761000.png": "# linear_step fromfunction with transition\ndef linear_step_func(x,x0,x1):\n    y= np.piecewise(x, [\n        x < x0, \n       (x >= x0) & (x <= x1), \n        x > x1],\n            [0.,\n            lambda x: x/(x1-x0)+x0/(x0-x1), \n             1.]\n       )\n    return y\narray=np.fromfunction(lambda i, j: linear_step_func(j,3,12), (15, 15))\ndisp(array,sep='.1f')\n",
  "example1640121481504953000.png": "#from 4 regions\nregion0 = np.zeros( (10,8) )\nregion1 = np.ones( (10,7) )\nregion_top= np.concatenate( [region0,region1] , axis=1)\n\nregion2 = np.full( (5,5) , 2)\nregion3 = np.full( (5,10) ,3)\nregion_bottom = np.concatenate( [region2,region3] , axis=1)\n\narray= np.concatenate( [region_top,region_bottom] ,axis=0)\ndisp(array)\n",
  "example1640121482956491000.png": "# prepare some coordinates\nx, y = np.indices((8, 8))\n\ncube1 = (x < 3) & (y < 3)\ncube2 = (x >= 5) & (y >= 5)\nlink = np.sqrt(abs(x - y)) <= 1\narray = np.zeros(x.shape)\narray[link]=14\narray[cube1]=10\narray[cube2]=30\ndisp(array)\n"
}